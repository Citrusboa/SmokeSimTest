!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ADVECT	fluid.cpp	189;"	d	file:
ALMOST_EQUAL	fluid.h	21;"	d
ALMOST_EQUAL	viewer.h	10;"	d
AMBIENT	viewer.cpp	388;"	d	file:
ARCBALL_H	arcball.h	2;"	d
ApplyRotationMatrix	arcball.cpp	/^void Arcball::ApplyRotationMatrix()$/;"	f	class:Arcball
Arcball	arcball.cpp	/^Arcball::Arcball()$/;"	f	class:Arcball
Arcball	arcball.h	/^class Arcball$/;"	c
BOUNDARY	fluid.cpp	30;"	d	file:
BeginLoop	controller.cpp	/^void Controller::BeginLoop()$/;"	f	class:Controller
CAMERA_H	camera.h	2;"	d
CC	Makefile	/^CC = g++$/;"	m
CONTROLLER_H	controller.h	2;"	d
CORE_H	core.h	2;"	d
Camera	camera.cpp	/^Camera::Camera(GLFWwindow* windowHandle) {$/;"	f	class:Camera
Camera	camera.h	/^class Camera {$/;"	c
ComputeNormal	object.cpp	/^void Object::ComputeNormal(GLfloat v[3][3], GLfloat normal[]) $/;"	f	class:Object
ComputeVertexNormal	object.h	/^	virtual void ComputeVertexNormal() {}$/;"	f	class:Object
Controller	controller.cpp	/^Controller::Controller(int argc,char **argv, const char *windowName) $/;"	f	class:Controller
Controller	controller.h	/^class Controller {$/;"	c
ConvertXY	arcball.cpp	/^Eigen::Vector3d Arcball::ConvertXY(int x, int y)$/;"	f	class:Arcball
Convexcomp	viewer.cpp	/^		Convexcomp(const Vec3& p0, const Vec3& up) : p0(p0), up(up) {}$/;"	f	class:Convexcomp
Convexcomp	viewer.cpp	/^class Convexcomp$/;"	c	file:
CreateShaderProgram	object.cpp	/^void Object::CreateShaderProgram()$/;"	f	class:Object
Cube	object.cpp	/^void Object::Cube() {                               \/\/ 立方体の描画$/;"	f	class:Object
DEBUG_LEVEL	core.h	6;"	d
DECAY	viewer.cpp	365;"	d	file:
DIFFUSE	fluid.cpp	188;"	d	file:
DRAWER_H	object.h	2;"	d
DT	fluid.h	9;"	d
DirectoryOfThisScript	.ycm_extra_conf.py	/^def DirectoryOfThisScript():$/;"	f
END_FOR	fluid.h	19;"	d
EnableShader	object.cpp	/^void Object::EnableShader()$/;"	f	class:Object
EventListener	event_listener.h	/^class EventListener {$/;"	c
FOR_ALL_CELL	fluid.h	15;"	d
FOV_	camera.h	/^	GLfloat FOV_;		\/\/ Field of View Angle$/;"	m	class:Camera
FlagsForFile	.ycm_extra_conf.py	/^def FlagsForFile( filename, **kwargs ):$/;"	f
Fluid	fluid.cpp	/^Fluid::Fluid()$/;"	f	class:Fluid
Fluid	fluid.h	/^class Fluid: public Object$/;"	c
GLFW_INCLUDE_GLU	core.h	37;"	d
GLMatrix	arcball.h	/^typedef float GLMatrix[16];$/;"	t
GetActiveObject	controller.cpp	/^int Controller::GetActiveObject(int mx, int my)$/;"	f	class:Controller
INF	core.h	5;"	d
INITIAL_FOV	arcball.cpp	/^const float Arcball::INITIAL_FOV = 30;$/;"	m	class:Arcball	file:
INITIAL_FOV	arcball.h	/^   static const float INITIAL_FOV;$/;"	m	class:Arcball
InitCamera	controller.cpp	/^void Controller::InitCamera()$/;"	f	class:Controller
Keyboard	controller.cpp	/^void Controller::Keyboard(GLFWwindow * window, int key, int scancode, int action, int mods)	$/;"	f	class:Controller
Keyboard	object.h	/^	virtual void Keyboard(GLFWwindow * window, int key, int scancode, int action, int mods) {}$/;"	f	class:Object
LIBS	Makefile	/^LIBS = -lGLEW -lGL -lGLU -lglfw3 -lX11  -lXrandr -lpthread -lXi$/;"	m
LIBS_PATH	Makefile	/^LIBS_PATH = -L\/usr\/local\/lib\/OpenMesh$/;"	m
LoadFile	object.cpp	/^bool Object::LoadFile(char* fileName)$/;"	f	class:Object
LoadShaderFile	object.cpp	/^int Object::LoadShaderFile(const char* fileName, GLuint shader)$/;"	f	class:Object
MINIMAL_FOV	arcball.h	/^   static const float MINIMAL_FOV;$/;"	m	class:Arcball
MakeRelativePathsInFlagsAbsolute	.ycm_extra_conf.py	/^def MakeRelativePathsInFlagsAbsolute( flags, working_directory ):$/;"	f
MakeZero	vec3.hpp	/^inline Vec3 &Vec3::MakeZero() {$/;"	f	class:Vec3
MouseButton	controller.cpp	/^void Controller::MouseButton(GLFWwindow *window, int button,int action,int mods) $/;"	f	class:Controller
MouseButton	object.cpp	/^void Object::MouseButton(GLFWwindow *window, int button,int action,int mods) $/;"	f	class:Object
MouseMotion	controller.cpp	/^void Controller::MouseMotion(GLFWwindow *window, double nx, double ny) $/;"	f	class:Controller
MouseMotion	object.cpp	/^void Object::MouseMotion(GLFWwindow *window, double nx, double ny) $/;"	f	class:Object
N	fluid.h	11;"	d
Normalize	vec3.hpp	/^inline Vec3 &Vec3::Normalize() {$/;"	f	class:Vec3
Object	object.cpp	/^Object::Object() $/;"	f	class:Object
Object	object.h	/^class Object: public EventListener{$/;"	c
PI	core.h	4;"	d
Quit	controller.cpp	/^void Controller::Quit() {$/;"	f	class:Controller
RELEASE	Makefile	/^RELEASE := 1$/;"	m
RES	fluid.h	10;"	d
RebindShader	object.cpp	/^void Object::RebindShader(GLuint hVertexShader, GLuint hfragShader)$/;"	f	class:Object
Ref	vec3.hpp	/^inline double *Vec3::Ref() const {$/;"	f	class:Vec3
RegisterObject	controller.cpp	/^void Controller::RegisterObject(Object* object)$/;"	f	class:Controller
RegisterParentWindow	camera.cpp	/^void Camera::RegisterParentWindow(GLFWwindow* windowHandle)$/;"	f	class:Camera
RegisterParentWindow	object.cpp	/^void Object::RegisterParentWindow(GLFWwindow* windowHandle)$/;"	f	class:Object
RegisterShader	object.cpp	/^void Object::RegisterShader(const char* progName, GLenum shaderType)$/;"	f	class:Object
Render	controller.cpp	/^void Controller::Render() {$/;"	f	class:Controller
Reset	arcball.cpp	/^void Arcball::Reset()$/;"	f	class:Arcball
Reset	camera.cpp	/^void Camera::Reset()$/;"	f	class:Camera
Reset	controller.cpp	/^void Controller::Reset() {$/;"	f	class:Controller
Reset	object.cpp	/^void Object::Reset() {$/;"	f	class:Object
Resize	controller.cpp	/^void Controller::Resize(GLFWwindow *window, int x, int y) {$/;"	f	class:Controller
Resize	object.cpp	/^void Object::Resize(GLFWwindow* windowHandle, int x, int y)$/;"	f	class:Object
SIZE	fluid.h	12;"	d
SRC	Makefile	/^SRC := $(shell find . -name "*.cpp")$/;"	m
SetAspect	camera.cpp	/^void Camera::SetAspect(GLfloat aspect)		$/;"	f	class:Camera
SetLight	camera.cpp	/^void Camera::SetLight()$/;"	f	class:Camera
SetRadius	arcball.cpp	/^void Arcball::SetRadius(float newRadius)$/;"	f	class:Arcball
SetWidthHeight	arcball.cpp	/^void Arcball::SetWidthHeight(int w, int h)$/;"	f	class:Arcball
Show	fluid.cpp	/^void Fluid::Show()$/;"	f	class:Fluid
Show	object.cpp	/^void Object::Show() $/;"	f	class:Object
SimulateStep	fluid.cpp	/^void Fluid::SimulateStep()$/;"	f	class:Fluid
SimulateStep	object.h	/^	virtual void SimulateStep() {};$/;"	f	class:Object
StartRotation	arcball.cpp	/^void Arcball::StartRotation(int _x, int _y)$/;"	f	class:Arcball
StartTimer	timer.cpp	/^void Timer::StartTimer()$/;"	f	class:Timer
StartZooming	arcball.cpp	/^void Arcball::StartZooming(int x, int y)$/;"	f	class:Arcball
StopRotation	arcball.cpp	/^void Arcball::StopRotation()$/;"	f	class:Arcball
StopTimer	timer.cpp	/^double Timer::StopTimer()$/;"	f	class:Timer
StopZooming	arcball.cpp	/^void Arcball::StopZooming()$/;"	f	class:Arcball
TARGET	Makefile	/^TARGET = main$/;"	m
TRANSLATION_FACTOR	arcball.cpp	/^const float Arcball::TRANSLATION_FACTOR = 0.01f;$/;"	m	class:Arcball	file:
TRANSLATION_FACTOR	arcball.h	/^   static const float TRANSLATION_FACTOR;$/;"	m	class:Arcball
Timer	timer.cpp	/^Timer::Timer()$/;"	f	class:Timer
Timer	timer.h	/^class Timer {$/;"	c
UpdateRotation	arcball.cpp	/^void Arcball::UpdateRotation(int _x, int _y)$/;"	f	class:Arcball
UpdateZooming	arcball.cpp	/^void Arcball::UpdateZooming(int x, int y)$/;"	f	class:Arcball
VEC3_HPP	vec3.hpp	11;"	d
Vec3	vec3.hpp	/^class Vec3 {$/;"	c
Vec3	vec3.hpp	/^inline Vec3::Vec3() {$/;"	f	class:Vec3
Vec3	vec3.hpp	/^inline Vec3::Vec3(const Vec3 &v)  {$/;"	f	class:Vec3
Vec3	vec3.hpp	/^inline Vec3::Vec3(double x, double y, double z) {$/;"	f	class:Vec3
Viewer	viewer.cpp	/^Viewer::Viewer()$/;"	f	class:Viewer
Viewer	viewer.h	/^class Viewer$/;"	c
WINDOW_NAME	main.cpp	5;"	d	file:
_ComputeFPS	controller.cpp	/^void Controller::_ComputeFPS()$/;"	f	class:Controller
_GenerateSmoke	fluid.cpp	/^void Fluid::_GenerateSmoke()$/;"	f	class:Fluid
_I	fluid.h	13;"	d
_N	viewer.h	/^	int _N;					\/\/ data resolution$/;"	m	class:Viewer
_USE_MATH_DEFINES	arcball.cpp	1;"	d	file:
_VIEWER_H	viewer.h	3;"	d
__FLUID_H	fluid.h	3;"	d
_ax	viewer.h	/^	int _ax, _ay;			\/\/ mouse movement anchor$/;"	m	class:Viewer
_ay	viewer.h	/^	int _ax, _ay;			\/\/ mouse movement anchor$/;"	m	class:Viewer
_buffers	fluid.h	/^	float _buffers[10][SIZE];$/;"	m	class:Fluid
_cur_frame	viewer.h	/^	int _cur_frame;$/;"	m	class:Viewer
_data	vec3.hpp	/^  double _data[3];$/;"	m	class:Vec3
_density	fluid.h	/^	float *_density, *_densityTmp;			\/\/ density$/;"	m	class:Fluid
_densityTmp	fluid.h	/^	float *_density, *_densityTmp;			\/\/ density$/;"	m	class:Fluid
_dispstring	viewer.h	/^	char* _dispstring;$/;"	m	class:Viewer
_dist	viewer.h	/^	float _dist;			\/\/ viewer distance to origin$/;"	m	class:Viewer
_draw_slice_outline	viewer.h	/^	bool _draw_slice_outline;$/;"	m	class:Viewer
_dt	fluid.h	/^	float _dt;$/;"	m	class:Fluid
_font_base	viewer.h	/^	unsigned int _font_base;			\/\/ first display list for font$/;"	m	class:Viewer
_fp	viewer.h	/^	FILE* _fp;				\/\/ data file$/;"	m	class:Viewer
_hShaders	object.h	/^	GLuint _hShaders[10]; \/\/support upto 10 shaders;$/;"	m	class:Object
_light_dir	viewer.h	/^	float _light_dir[3];$/;"	m	class:Viewer
_lquat	viewer.h	/^	float _lquat[4];		\/\/ light orientation quaternion (bit of a hack...)$/;"	m	class:Viewer
_nframes	viewer.h	/^	int _nframes;			\/\/ number of frames in data file$/;"	m	class:Viewer
_ortho_m	viewer.h	/^	double _persp_m[16], _ortho_m[16];	\/\/ projection matrices$/;"	m	class:Viewer
_persp_m	viewer.h	/^	double _persp_m[16], _ortho_m[16];	\/\/ projection matrices$/;"	m	class:Viewer
_prog	viewer.h	/^	unsigned int _prog[2];				\/\/ program handles$/;"	m	class:Viewer
_quat	viewer.h	/^	float _quat[4];			\/\/ view rotation quaternion$/;"	m	class:Viewer
_ray_templ	viewer.h	/^	int _ray_templ[4096][3];$/;"	m	class:Viewer
_sx	viewer.h	/^	int _sx, _sy;			\/\/ screen width and height$/;"	m	class:Viewer
_sy	viewer.h	/^	int _sx, _sy;			\/\/ screen width and height$/;"	m	class:Viewer
_texture_data	viewer.h	/^	unsigned char* _texture_data;$/;"	m	class:Viewer
_txt	viewer.h	/^	unsigned int _txt[3];				\/\/ texture handles$/;"	m	class:Viewer
_velX	fluid.h	/^	float *_velX, *_velXTmp;			\/\/ velocity in x direction$/;"	m	class:Fluid
_velXTmp	fluid.h	/^	float *_velX, *_velXTmp;			\/\/ velocity in x direction$/;"	m	class:Fluid
_velY	fluid.h	/^	float *_velY, *_velYTmp;			\/\/ velocity in y direction$/;"	m	class:Fluid
_velYTmp	fluid.h	/^	float *_velY, *_velYTmp;			\/\/ velocity in y direction$/;"	m	class:Fluid
_velZ	fluid.h	/^	float *_velZ, *_velZTmp;			\/\/ velocity in z direction$/;"	m	class:Fluid
_velZTmp	fluid.h	/^	float *_velZ, *_velZTmp;			\/\/ velocity in z direction$/;"	m	class:Fluid
_viewer	fluid.h	/^	Viewer* _viewer;$/;"	m	class:Fluid
activeObj_	controller.h	/^	int activeObj_;$/;"	m	class:Controller
add_buoyancy	fluid.cpp	/^void Fluid::add_buoyancy()$/;"	f	class:Fluid
add_source	fluid.cpp	/^void Fluid::add_source(float* src, float *dst)$/;"	f	class:Fluid
advect	fluid.cpp	/^inline void Fluid::advect(int b, float* x0, float* x, float* uu, float* vv, float* ww)$/;"	f	class:Fluid
arcball_	object.h	/^	Arcball arcball_;$/;"	m	class:Object
aspect_	camera.h	/^	GLfloat aspect_;	\/\/ Aspect Ratio$/;"	m	class:Camera
ballRadius	arcball.h	/^   float ballRadius;$/;"	m	class:Arcball
buoyancy	fluid.h	/^	float diffusion, viscosity, buoyancy, vc_eps;$/;"	m	class:Fluid
camera_	controller.h	/^	Camera* camera_;$/;"	m	class:Controller
cast_light	viewer.cpp	/^void Viewer::cast_light(int n \/*edgelen*\/, float* dens, unsigned char* intensity)$/;"	f	class:Viewer
clear_buffer	fluid.cpp	/^void Fluid::clear_buffer(float* x)$/;"	f	class:Fluid
clear_sources	fluid.cpp	/^void Fluid::clear_sources(void)$/;"	f	class:Fluid
compilation_database_folder	.ycm_extra_conf.py	/^compilation_database_folder = ''$/;"	v
cross	vec3.hpp	/^inline Vec3 cross(const Vec3 &a, const Vec3 &b) {$/;"	f
currentMatrix	arcball.h	/^   GLMatrix currentMatrix;$/;"	m	class:Arcball
currentRotationVector	arcball.h	/^   Eigen::Vector3d currentRotationVector;$/;"	m	class:Arcball
currentTransX	arcball.h	/^   float currentTransX, currentTransY;$/;"	m	class:Arcball
currentTransY	arcball.h	/^   float currentTransX, currentTransY;$/;"	m	class:Arcball
currentTranslationVector	arcball.h	/^   Eigen::Vector2f currentTranslationVector;$/;"	m	class:Arcball
cv	viewer.cpp	/^GLfloat cv[][3] = {$/;"	v
database	.ycm_extra_conf.py	/^  database = None$/;"	v
database	.ycm_extra_conf.py	/^  database = ycm_core.CompilationDatabase( compilation_database_folder )$/;"	v
dens_step	fluid.cpp	/^void Fluid::dens_step()$/;"	f	class:Fluid
depth_	object.h	/^	GLfloat depth_;$/;"	m	class:Object
diffuse	fluid.cpp	/^inline void Fluid::diffuse(int b, float* x0, float* x, float diff)$/;"	f	class:Fluid
diffusion	fluid.h	/^	float diffusion, viscosity, buoyancy, vc_eps;$/;"	m	class:Fluid
dot	vec3.hpp	/^inline double dot(const Vec3 &a, const Vec3 &b) {$/;"	f
draw	viewer.cpp	/^void Viewer::draw(void)$/;"	f	class:Viewer
draw_cube	viewer.cpp	/^void Viewer::draw_cube(void)$/;"	f	class:Viewer
draw_slices	viewer.cpp	/^void Viewer::draw_slices(GLdouble m[][4], bool frame)$/;"	f	class:Viewer
edges	viewer.cpp	/^float edges[12][2][3] = {$/;"	v
elapsedTime_	controller.h	/^	double elapsedTime_;$/;"	m	class:Controller
elapsedTime_	timer.h	/^	double elapsedTime_;$/;"	m	class:Timer
error_callback	controller.cpp	/^static void error_callback(int error, const char* description)$/;"	f	file:
farClip_	camera.h	/^	GLfloat farClip_;	\/\/ Far clipping plane distance$/;"	m	class:Camera
file_	object.h	/^	std::fstream file_;$/;"	m	class:Object
flags	.ycm_extra_conf.py	/^flags = [$/;"	v
fov	arcball.h	/^   float fov;$/;"	m	class:Arcball
fovCurrentY	arcball.h	/^   int fovCurrentY;$/;"	m	class:Arcball
fovStartY	arcball.h	/^   int fovStartY;$/;"	m	class:Arcball
fps_	controller.h	/^	double fps_;$/;"	m	class:Controller
frame_from_sim	viewer.cpp	/^void Viewer::frame_from_sim(Fluid* fluid)$/;"	f	class:Viewer
g_bfTexObj	object.h	/^	GLuint g_bfTexObj;$/;"	m	class:Object
g_controller	main.cpp	/^Controller* g_controller = NULL;$/;"	v
g_frameBuffer	object.h	/^	GLuint g_frameBuffer;$/;"	m	class:Object
g_stepSize	object.h	/^	float g_stepSize;$/;"	m	class:Object
g_tffTexObj	object.h	/^	GLuint g_tffTexObj;$/;"	m	class:Object
g_vao	object.h	/^	GLuint g_vao;$/;"	m	class:Object
g_volTexObj	object.h	/^	GLuint g_volTexObj;$/;"	m	class:Object
gen_ray_templ	viewer.cpp	/^void Viewer::gen_ray_templ(int edgelen)$/;"	f	class:Viewer
height	arcball.h	/^   int width, height;$/;"	m	class:Arcball
init_GL	viewer.cpp	/^void Viewer::init_GL(void)$/;"	f	class:Viewer
intersect_edges	viewer.cpp	/^std::vector<Vec3> Viewer::intersect_edges(float a, float b, float c, float d)$/;"	f	class:Viewer
isCtrlPressed_	controller.h	/^	bool isLeftKeyPressed_, isCtrlPressed_, isRightKeyPressed_, isMiddleKeyPressed_;$/;"	m	class:Controller
isCtrlPressed_	object.h	/^	bool isLeftKeyPressed_, isCtrlPressed_, isRightKeyPressed_, isMiddleKeyPressed_;$/;"	m	class:Object
isLeftKeyPressed_	controller.h	/^	bool isLeftKeyPressed_, isCtrlPressed_, isRightKeyPressed_, isMiddleKeyPressed_;$/;"	m	class:Controller
isLeftKeyPressed_	object.h	/^	bool isLeftKeyPressed_, isCtrlPressed_, isRightKeyPressed_, isMiddleKeyPressed_;$/;"	m	class:Object
isLightOn_	controller.h	/^	bool isLightOn_;$/;"	m	class:Controller
isMiddleKeyPressed_	controller.h	/^	bool isLeftKeyPressed_, isCtrlPressed_, isRightKeyPressed_, isMiddleKeyPressed_;$/;"	m	class:Controller
isMiddleKeyPressed_	object.h	/^	bool isLeftKeyPressed_, isCtrlPressed_, isRightKeyPressed_, isMiddleKeyPressed_;$/;"	m	class:Object
isRightKeyPressed_	controller.h	/^	bool isLeftKeyPressed_, isCtrlPressed_, isRightKeyPressed_, isMiddleKeyPressed_;$/;"	m	class:Controller
isRightKeyPressed_	object.h	/^	bool isLeftKeyPressed_, isCtrlPressed_, isRightKeyPressed_, isMiddleKeyPressed_;$/;"	m	class:Object
isRotating	arcball.h	/^   bool isRotating;$/;"	m	class:Arcball
isZooming	arcball.h	/^   bool isZooming;$/;"	m	class:Arcball
keyboard	controller.cpp	/^static void keyboard(GLFWwindow * window, int key, int scancode,int action, int mods)		$/;"	f	file:
len	vec3.hpp	/^inline double len(const Vec3 &v) {$/;"	f
light_ray	viewer.cpp	/^inline void Viewer::light_ray(int x, int y, int z, int n, float decay, float* dens, unsigned char* intensity)$/;"	f	class:Viewer
main	main.cpp	/^int main(int argc, char **argv) {$/;"	f
maxObjectNo_	controller.h	/^	int maxObjectNo_;$/;"	m	class:Controller
mousebutton	controller.cpp	/^static void mousebutton(GLFWwindow *window,int button,int action,int mods)	$/;"	f	file:
mousemotion	controller.cpp	/^static void mousemotion(GLFWwindow *window, double x, double y)$/;"	f	file:
nearClip_	camera.h	/^	GLfloat nearClip_;	\/\/ Near clipping plane distance$/;"	m	class:Camera
normalize	vec3.hpp	/^inline void normalize(Vec3 &v)	{$/;"	f
numOfFrame_	controller.h	/^	int numOfFrame_;$/;"	m	class:Controller
objectNo_	controller.h	/^	int objectNo_;$/;"	m	class:Controller
objects_	controller.h	/^	Object** objects_;$/;"	m	class:Controller
operator ()	viewer.cpp	/^		bool operator()(const Vec3& a, const Vec3& b) const$/;"	f	class:Convexcomp
operator *	vec3.hpp	/^inline Vec3 Vec3::operator * (double s) const {$/;"	f	class:Vec3
operator *	vec3.hpp	/^inline Vec3 operator * (double s, const Vec3 &v) {$/;"	f
operator *=	vec3.hpp	/^inline Vec3 &Vec3::operator *= (const Vec3 &a) {$/;"	f	class:Vec3
operator *=	vec3.hpp	/^inline Vec3 &Vec3::operator *= (double s) {$/;"	f	class:Vec3
operator +	vec3.hpp	/^inline Vec3 Vec3::operator + (const Vec3 &a) const {$/;"	f	class:Vec3
operator +=	vec3.hpp	/^inline Vec3 &Vec3::operator += (const Vec3 &v) {$/;"	f	class:Vec3
operator -	vec3.hpp	/^inline Vec3 Vec3::operator - () const {$/;"	f	class:Vec3
operator -	vec3.hpp	/^inline Vec3 Vec3::operator - (const Vec3 &a) const {$/;"	f	class:Vec3
operator -=	vec3.hpp	/^inline Vec3 &Vec3::operator -= (const Vec3 &v) {$/;"	f	class:Vec3
operator /	vec3.hpp	/^inline Vec3 Vec3::operator \/ (double s) const {$/;"	f	class:Vec3
operator /=	vec3.hpp	/^inline Vec3 &Vec3::operator \/= (const Vec3 &a) {$/;"	f	class:Vec3
operator /=	vec3.hpp	/^inline Vec3 &Vec3::operator \/= (double s) {$/;"	f	class:Vec3
operator =	vec3.hpp	/^inline Vec3 &Vec3::operator = (const Vec3 &v) {$/;"	f	class:Vec3
operator []	vec3.hpp	/^inline const double &Vec3::operator [] (int i) const {$/;"	f	class:Vec3
operator []	vec3.hpp	/^inline double &Vec3::operator [] (int i) {$/;"	f	class:Vec3
p0	viewer.cpp	/^		const Vec3 &p0, &up;$/;"	m	class:Convexcomp	file:
prevX_	controller.h	/^	double prevX_, prevY_;$/;"	m	class:Controller
prevY_	controller.h	/^	double prevX_, prevY_;$/;"	m	class:Controller
project	fluid.cpp	/^void Fluid::project(void)$/;"	f	class:Fluid
residualSpin	arcball.h	/^   double residualSpin;$/;"	m	class:Arcball
resize	controller.cpp	/^static void resize(GLFWwindow *window, int x,int y)$/;"	f	file:
rotX_	object.h	/^	GLfloat rotX_;$/;"	m	class:Object
rotY_	object.h	/^	GLfloat rotY_;$/;"	m	class:Object
sT	fluid.h	/^	float sd[SIZE], su[SIZE], sv[SIZE], sw[SIZE], sT[SIZE];	\/\/ sources for density and velocities$/;"	m	class:Fluid
sd	fluid.h	/^	float sd[SIZE], su[SIZE], sv[SIZE], sw[SIZE], sT[SIZE];	\/\/ sources for density and velocities$/;"	m	class:Fluid
set_bnd	fluid.cpp	/^void Fluid::set_bnd(int b, float* x)$/;"	f	class:Fluid
shaderNum	object.h	/^	int shaderNum;			\/\/current number of shaders$/;"	m	class:Object
shaderProg_	object.h	/^	GLuint shaderProg_;	 \/\/shader$/;"	m	class:Object
size	vec3.hpp	/^  inline int size() const { return(3); }$/;"	f	class:Vec3
sqrlen	vec3.hpp	/^inline double sqrlen(const Vec3 &v) {$/;"	f
startMatrix	arcball.h	/^   GLMatrix startMatrix;$/;"	m	class:Arcball
startRotationVector	arcball.h	/^   Eigen::Vector3d startRotationVector;$/;"	m	class:Arcball
startTime_	timer.h	/^	double startTime_;$/;"	m	class:Timer
startTranslationVector	arcball.h	/^   Eigen::Vector2f startTranslationVector;$/;"	m	class:Arcball
startZoomX	arcball.h	/^   float startZoomX, startZoomY;$/;"	m	class:Arcball
startZoomY	arcball.h	/^   float startZoomX, startZoomY;$/;"	m	class:Arcball
stopTime_	timer.h	/^	double stopTime_;$/;"	m	class:Timer
su	fluid.h	/^	float sd[SIZE], su[SIZE], sv[SIZE], sw[SIZE], sT[SIZE];	\/\/ sources for density and velocities$/;"	m	class:Fluid
sv	fluid.h	/^	float sd[SIZE], su[SIZE], sv[SIZE], sw[SIZE], sT[SIZE];	\/\/ sources for density and velocities$/;"	m	class:Fluid
sw	fluid.h	/^	float sd[SIZE], su[SIZE], sv[SIZE], sw[SIZE], sT[SIZE];	\/\/ sources for density and velocities$/;"	m	class:Fluid
timer_	controller.h	/^	Timer timer_;$/;"	m	class:Controller
titleInfo_	controller.h	/^	std::stringstream titleInfo_;$/;"	m	class:Controller
transX	arcball.h	/^   float transX, transY;$/;"	m	class:Arcball
transY	arcball.h	/^   float transX, transY;$/;"	m	class:Arcball
up	viewer.cpp	/^		const Vec3 &p0, &up;$/;"	m	class:Convexcomp	file:
vc_eps	fluid.h	/^	float diffusion, viscosity, buoyancy, vc_eps;$/;"	m	class:Fluid
vel_step	fluid.cpp	/^void Fluid::vel_step()$/;"	f	class:Fluid
viscosity	fluid.h	/^	float diffusion, viscosity, buoyancy, vc_eps;$/;"	m	class:Fluid
vorticity_confinement	fluid.cpp	/^void Fluid::vorticity_confinement()$/;"	f	class:Fluid
width	arcball.h	/^   int width, height;$/;"	m	class:Arcball
winX_	camera.h	/^	int winX_;$/;"	m	class:Camera
winX_	controller.h	/^	int winX_, winY_;$/;"	m	class:Controller
winX_	object.h	/^	int winX_, winY_;$/;"	m	class:Object
winY_	camera.h	/^	int winY_;$/;"	m	class:Camera
winY_	controller.h	/^	int winX_, winY_;$/;"	m	class:Controller
winY_	object.h	/^	int winX_, winY_;$/;"	m	class:Object
windowHandle_	camera.h	/^	GLFWwindow* windowHandle_;$/;"	m	class:Camera
windowHandle_	controller.h	/^	GLFWwindow *windowHandle_;$/;"	m	class:Controller
windowHandle_	object.h	/^	GLFWwindow* windowHandle_;$/;"	m	class:Object
windowName_	controller.h	/^	std::string windowName_;$/;"	m	class:Controller
zoomRate	arcball.h	/^   float zoomRate;$/;"	m	class:Arcball
~Controller	controller.cpp	/^Controller::~Controller() {$/;"	f	class:Controller
~Fluid	fluid.cpp	/^Fluid::~Fluid()$/;"	f	class:Fluid
~Object	object.cpp	/^Object::~Object()$/;"	f	class:Object
~Viewer	viewer.cpp	/^Viewer::~Viewer()$/;"	f	class:Viewer
